[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "space-syntax-analyzer"
version = "0.2.1"
description = "A comprehensive Python library for space syntax analysis of urban street networks with axial analysis and visibility graph analysis"
authors = [
    {name = "Space Syntax Analyzer Team", email = "contact@space-syntax-analyzer.org"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "networkx>=3.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "shapely>=2.0.0",
    "geopandas>=0.14.0",
    "osmnx>=1.9.0",
    "fiona>=1.10.1",
    "pyproj>=3.6.1",
    "scikit-learn>=1.3.0",
    "rtree>=1.0.0", # この行を追加
    "japanize-matplotlib>=1.1.3",
    "contextily>=1.6.2",
]
keywords = [
    "space syntax",
    "urban planning", 
    "network analysis",
    "street networks",
    "urban studies",
    "spatial analysis",
    "axial analysis",
    "visibility graph analysis",
    "integration value",
    "isovist analysis"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Scientific/Engineering",
]

[project.urls]
Homepage = "https://github.com/space-syntax/space-syntax-analyzer"
Documentation = "https://space-syntax-analyzer.readthedocs.io"
Repository = "https://github.com/space-syntax/space-syntax-analyzer"
Issues = "https://github.com/space-syntax/space-syntax-analyzer/issues"
Changelog = "https://github.com/space-syntax/space-syntax-analyzer/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "twine>=6.1.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0,<4.0.0",
    "sphinx-autodoc-typehints>=1.24.0,<3.0.0",
    "myst-parser>=2.0.0,<4.0.0",
    "sphinx-copybutton>=0.5.0",
]
examples = [
    "jupyter>=1.0.0",
    "folium>=0.14.0",
    "plotly>=5.15.0",
    "seaborn>=0.12.0",
    "ipywidgets>=8.0.0",
]
viz = [
    "folium>=0.14.0",
    "plotly>=5.15.0", 
    "seaborn>=0.12.0",
    "bokeh>=3.0.0",
    "altair>=5.0.0",
]
performance = [
    "numba>=0.58.0",
    "cython>=3.0.0",
    "dask>=2023.5.0",
]
all = [
    "space-syntax-analyzer[dev,docs,examples,viz,performance]"
]

[project.scripts]
space-syntax-demo = "space_syntax_analyzer.examples.demo:main"

[tool.hatch.build.targets.wheel]
packages = ["space_syntax_analyzer"]

[tool.hatch.build.targets.wheel.sources]
"space_syntax_analyzer" = "space_syntax_analyzer"
"examples" = "space_syntax_analyzer/examples"
"tests" = "tests"

[tool.black]
target-version = ['py310']
line-length = 88
skip-string-normalization = true
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["space_syntax_analyzer"]
known_third_party = ["networkx", "numpy", "pandas", "matplotlib", "shapely", "geopandas", "osmnx"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# 外部ライブラリの型エラーを無視
[[tool.mypy.overrides]]
module = [
    "osmnx.*",
    "geopandas.*", 
    "shapely.*",
    "folium.*",
    "plotly.*",
    "sklearn.*",
    "rtree.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=space_syntax_analyzer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = [
    "tests",
]
pythonpath = [
    "."
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "visualization: marks tests that generate visualizations",
    "network: marks tests that require network access",
]

[tool.coverage.run]
source = ["space_syntax_analyzer"]
omit = [
    "*/tests/*",
    "*/test_*",
    "space_syntax_analyzer/examples/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "logger\\.(debug|info|warning|error|critical)",
]
precision = 2
show_missing = true

[tool.ruff]
target-version = "py310"
line-length = 88
extend-exclude = [
    "docs",
    "build",
    "dist",
    ".eggs",
    ".tox",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "Q",   # flake8-quotes
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert detected
    "T201",  # print found
    "T203",  # pprint found
    "ARG001", # unused function argument
    "ARG002", # unused method argument
    "N803",  # argument name should be lowercase (conflicts with scientific notation)
    "N806",  # variable in function should be lowercase (conflicts with scientific notation)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["S", "ARG", "T201", "T203"]
"examples/*" = ["T201", "T203", "S"]
"space_syntax_analyzer/examples/*" = ["T201", "T203", "S"]

[tool.ruff.lint.isort]
known-first-party = ["space_syntax_analyzer"]
known-third-party = ["networkx", "numpy", "pandas", "matplotlib", "shapely", "geopandas", "osmnx"]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1", 
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.8",
    "pre-commit>=4.0.1",
    "twine>=6.1.0",
]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.6.0",
    "pytest-mock>=3.14.0",
]
docs = [
    "sphinx>=7.0.0,<9.0.0",
    "sphinx-rtd-theme>=1.3.0,<4.0.0", 
    "sphinx-autodoc-typehints>=1.24.0,<3.0.0",
    "myst-parser>=2.0.0,<4.0.0",
    "sphinx-copybutton>=0.5.2",
]
