[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "space-syntax-analyzer"
version = "1.0.0"
description = "OpenStreetMapデータを活用したSpace Syntax理論に基づく都市空間構造解析システム"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Space Syntax Development Team", email = "dev@example.com"}
]
maintainers = [
    {name = "Space Syntax Development Team", email = "dev@example.com"}
]
keywords = [
    "space syntax", "urban analysis", "network analysis", 
    "openstreetmap", "gis", "spatial analysis", "graph theory",
    "urban planning", "architecture", "accessibility"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Visualization", 
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Natural Language :: Japanese",
    "Natural Language :: English",
]
requires-python = ">=3.8"

# パッケージ構造の明示的定義
[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.wheel.sources]
"src" = "space_syntax_analyzer"

# 基本依存関係
dependencies = [
    "networkx>=2.5",
    "osmnx>=1.0.0",
    "geopandas>=0.10.0",
    "pandas>=1.4.0",
    "numpy>=1.22.0",
    "scipy>=1.8.0",
    "shapely>=2.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "jinja2>=3.0.0",
    "requests>=2.27.0,<3.0.0",
]

[project.optional-dependencies]
# フル機能（推奨）
full = [
    "folium>=0.12.0",
    "weasyprint>=54.0",
    "psutil>=5.8.0",
    "plotly>=5.0.0",
    "rasterio>=1.3.0",
    "contextily>=1.2.0",
    "tqdm>=4.60.0",
    "rich>=12.0.0",
]

# PDF生成機能
pdf = [
    "weasyprint>=54.0",
]

# インタラクティブ機能
interactive = [
    "folium>=0.12.0",
    "plotly>=5.0.0",
    "ipywidgets>=8.0.0",
]

# 開発用
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=0.950",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "memory-profiler>=0.60.0",
]

# ドキュメント生成
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.17.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

# テスト用
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "coverage>=7.0.0",
]

# 全機能（開発者向け）
all = [
    "space-syntax-analyzer[full,dev,docs,test]",
]

[project.urls]
Homepage = "https://github.com/your-org/space-syntax-analyzer"
Documentation = "https://space-syntax-analyzer.readthedocs.io/"
Repository = "https://github.com/your-org/space-syntax-analyzer.git"
"Bug Tracker" = "https://github.com/your-org/space-syntax-analyzer/issues"

[project.scripts]
space-syntax = "main:main"
ss-analyze = "main:main"

[tool.uv]
# uv固有の設定
dev-dependencies = [
    "pytest>=7.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
]

[tool.uv.sources]
# カスタムソース（必要に応じて）

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # ignore unused imports in __init__.py

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "osmnx.*",
    "geopandas.*",
    "folium.*",
    "weasyprint.*",
    "plotly.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]